from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Router
from database import Session, User, Pet, PetType, Reminder
from keyboards import *
from notifications import (
    scheduler,
    remove_reminder,
    schedule_jobs,
    schedule_vaccination_reminder
)
import re
import logging
from datetime import datetime
from dateutil.relativedelta import relativedelta

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

class Form(StatesGroup):
    pet_type = State()
    pet_name = State()
    pet_breed = State()
    vaccination_date = State()
    confirm_notification = State()
    reminder_pet = State()
    reminder_time = State()
    reminder_days = State()
    edit_reminder_time = State()
    edit_reminder_days = State()
    edit_vaccination_date = State()
    info_pet_type = State()
    info_category = State()

@router.message(F.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_menu()
    )

@router.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    # –û—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
    await message.answer(
        "üêïü¶∫ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PetCareBot!",
        reply_markup=get_main_menu()
    )

@router.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_bot(message: types.Message):
    text = (
        "ü§ñ <b>PetCareBot</b> - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É—Ö–æ–¥—É –∑–∞ –ø–∏—Ç–æ–º—Ü–∞–º–∏\n"
        "üìå <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –ø–∏—Ç–æ–º—Ü–µ–≤\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏\n"
        "‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏\n"
    )
    await message.answer(text, reply_markup=get_main_menu())

@router.message(F.text == "üêæ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
    with Session() as session:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user or not user.pets:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤", reply_markup=get_main_menu())
            return
        await message.answer("üêæ <b>–í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã:</b>")
        for pet in user.pets:
            text = f"‚ñ™Ô∏è <b>{pet.name}</b> ({pet.pet_type.value})"
            if pet.breed:
                text += f", –ø–æ—Ä–æ–¥–∞: {pet.breed}"
            text += f"\nüíâ –î–∞—Ç–∞ –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏–∏: {pet.vaccination_date if pet.vaccination_date else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}"
            await message.answer(text, reply_markup=get_pet_management_keyboard(pet))

@router.callback_query(F.data.startswith("delete_pet_"))
async def delete_pet_handler(query: CallbackQuery):
    try:
        pet_id = int(query.data.split("_")[2])
        with Session() as session:
            pet = session.query(Pet).filter_by(id=pet_id).first()
            if pet:
                for reminder in pet.reminders:
                    remove_reminder(reminder.id)
                    session.delete(reminder)
                pet_name = pet.name
                session.delete(pet)
                session.commit()
                try:
                    await query.message.delete()
                except:
                    pass
                await query.answer(f"‚úÖ –ü–∏—Ç–æ–º–µ—Ü {pet_name} —É–¥–∞–ª–µ–Ω")
                await query.message.answer(
                    f"–ü–∏—Ç–æ–º–µ—Ü {pet_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                    reply_markup=get_main_menu()
                )
            else:
                await query.answer("–ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞")
async def add_pet_start(message: types.Message, state: FSMContext):
    await message.answer(
        "üêæ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞:",
        reply_markup=get_pet_type_keyboard()
    )
    await state.set_state(Form.pet_type)

@router.message(Form.pet_type)
async def process_pet_type(message: types.Message, state: FSMContext):
    if message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main_menu(message, state)
        return

    pet_type = None
    if message.text == "üê± –ö–æ—à–∫–∞":
        pet_type = PetType.CAT
    elif message.text == "üê∂ –°–æ–±–∞–∫–∞":
        pet_type = PetType.DOG

    if not pet_type:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        return

    await state.update_data(pet_type=pet_type)
    await message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞:",
        reply_markup=get_back_button()
    )
    await state.set_state(Form.pet_name)

@router.message(Form.pet_name)
async def process_pet_name(message: types.Message, state: FSMContext):
    if message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main_menu(message, state)
        return

    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer(
            "üêæ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞:",
            reply_markup=get_pet_type_keyboard()
        )
        await state.set_state(Form.pet_type)
        return

    if len(message.text) > 50:
        await message.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª–æ–≤)")
        return

    await state.update_data(pet_name=message.text)
    data = await state.get_data()
    await message.answer(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä–æ–¥—É:",
        reply_markup=get_breeds_keyboard(data["pet_type"].value)
    )
    await state.set_state(Form.pet_breed)

@router.message(Form.pet_breed)
async def process_pet_breed(message: types.Message, state: FSMContext):
    if message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main_menu(message, state)
        return

    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞:",
            reply_markup=get_back_button()
        )
        await state.set_state(Form.pet_name)
        return

    data = await state.get_data()
    valid_breeds = {
        "–∫–æ—à–∫–∞": ["–ë—Ä–∏—Ç–∞–Ω—Å–∫–∞—è", "–°–∏–∞–º—Å–∫–∞—è", "–ú–µ–π–Ω-–∫—É–Ω"],
        "—Å–æ–±–∞–∫–∞": ["–õ–∞–±—Ä–∞–¥–æ—Ä", "–û–≤—á–∞—Ä–∫–∞", "–ë—É–ª—å–¥–æ–≥"]
    }.get(data["pet_type"].value, [])

    if message.text not in valid_breeds and message.text != "–î—Ä—É–≥–∞—è –ø–æ—Ä–æ–¥–∞":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä–æ–¥—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        return

    breed = None if message.text == "–î—Ä—É–≥–∞—è –ø–æ—Ä–æ–¥–∞" else message.text
    await state.update_data(pet_breed=breed)
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏–∏ (–î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ '–Ω–µ—Ç', –µ—Å–ª–∏ –Ω–µ –≤–∞–∫—Ü–∏–Ω–∏—Ä–æ–≤–∞–Ω:",
        reply_markup=get_back_button()
    )
    await state.set_state(Form.vaccination_date)

@router.message(Form.vaccination_date)
async def process_vaccination_date(message: types.Message, state: FSMContext):
    if message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main_menu(message, state)
        return

    if message.text.lower() == "–Ω–µ—Ç":
        await state.update_data(vaccination_date=None)
        data = await state.get_data()
        await save_pet(message, state, data)
        return

    if not re.match(r'^\d{2}\.\d{2}\.\d{4}$', message.text):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ '–Ω–µ—Ç'")
        return

    try:
        day, month, year = map(int, message.text.split('.'))
        input_date = datetime(year, month, day).date()
        today = datetime.now().date()

        if input_date > today:
            await message.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.")
            return

        one_year_ago = today - relativedelta(years=1)

        if input_date < one_year_ago:
            await state.update_data(
                old_vaccination_date=message.text,
                vaccination_date=None
            )
            await message.answer(
                "‚ö†Ô∏è –≠—Ç–∞ –¥–∞—Ç–∞ –±–æ–ª—å—à–µ –≥–æ–¥–∞ –Ω–∞–∑–∞–¥. –í–∞–∫—Ü–∏–Ω–∞—Ü–∏—è –¥–µ–ª–∞–µ—Ç—Å—è —Ä–∞–∑ –≤ –≥–æ–¥.\n"
                "–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏–∏?",
                reply_markup=get_yes_no_vaccination_keyboard()
            )
            return

        await state.update_data(vaccination_date=message.text)
        await message.answer(
            "–•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–ª–µ–¥—É—é—â–µ–π –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≥–æ–¥?",
            reply_markup=get_yes_no_vaccination_keyboard()
        )
        await state.set_state(Form.confirm_notification)

    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

@router.callback_query(F.data.in_(["yes_vaccination", "no_vaccination"]))
async def handle_vaccination_choice(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_state = await state.get_state()

    try:
        if current_state == Form.confirm_notification.state:
            # –û–±—ã—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            vaccination_date = data["vaccination_date"]
            set_reminder = query.data == "yes_vaccination"
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è —Å —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –¥–∞—Ç–æ–π
            if query.data == "yes_vaccination":
                vaccination_date = datetime.now().strftime("%d.%m.%Y")
                set_reminder = True
            else:
                vaccination_date = data.get("old_vaccination_date")
                set_reminder = False

        with Session() as session:
            user = session.query(User).filter_by(telegram_id=query.from_user.id).first()
            if not user:
                user = User(telegram_id=query.from_user.id)
                session.add(user)
                session.commit()

            pet = Pet(
                name=data["pet_name"],
                breed=data["pet_breed"],
                pet_type=data["pet_type"],
                vaccination_date=vaccination_date,
                owner=user
            )
            session.add(pet)
            session.commit()

            if set_reminder and vaccination_date:
                try:
                    await schedule_vaccination_reminder(
                        query.bot, pet.id, user.telegram_id,
                        pet.name, vaccination_date
                    )
                    await query.message.answer(
                        f"‚úÖ –ü–∏—Ç–æ–º–µ—Ü {pet.name} –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                        f"–î–∞—Ç–∞ –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏–∏: {vaccination_date}\n"
                        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
                        reply_markup=get_main_menu()
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
                    await query.message.answer(
                        f"‚úÖ –ü–∏—Ç–æ–º–µ—Ü {pet.name} –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                        f"–î–∞—Ç–∞ –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏–∏: {vaccination_date}\n"
                        "–ù–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏",
                        reply_markup=get_main_menu()
                    )
            else:
                await query.message.answer(
                    f"‚úÖ –ü–∏—Ç–æ–º–µ—Ü {data['pet_name']} –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                    f"–î–∞—Ç–∞ –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏–∏: {vaccination_date if vaccination_date else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}",
                    reply_markup=get_main_menu()
                )

        await state.clear()
        await query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_vaccination_choice: {e}")
        await query.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu()
        )
        await state.clear()

async def save_pet(message: types.Message, state: FSMContext, data: dict):
    with Session() as session:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user:
            user = User(telegram_id=message.from_user.id)
            session.add(user)
            session.commit()

        pet = Pet(
            name=data["pet_name"],
            breed=data["pet_breed"],
            pet_type=data["pet_type"],
            vaccination_date=data["vaccination_date"],
            owner=user
        )
        session.add(pet)
        session.commit()

    await message.answer(
        f"‚úÖ –ü–∏—Ç–æ–º–µ—Ü {data['pet_name']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=get_main_menu()
    )
    await state.clear()

@router.callback_query(F.data.startswith("edit_vacc_"))
async def edit_vaccination_start(query: CallbackQuery, state: FSMContext):
    pet_id = int(query.data.split("_")[2])
    await state.update_data(pet_id=pet_id)
    await query.message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏–∏ (–î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=get_back_button()
    )
    await state.set_state(Form.edit_vaccination_date)
    await query.answer()

@router.message(Form.edit_vaccination_date)
async def process_edit_vaccination(message: types.Message, state: FSMContext):
    if message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main_menu(message, state)
        return

    if message.text.lower() == "–Ω–µ—Ç":
        data = await state.get_data()
        with Session() as session:
            pet = session.query(Pet).filter_by(id=data["pet_id"]).first()
            if pet:
                pet.vaccination_date = None
                session.commit()
                for job in scheduler.get_jobs():
                    if job.id.startswith(f"vacc_{pet.id}_"):
                        scheduler.remove_job(job.id)
                await message.answer(
                    f"‚úÖ –î–∞—Ç–∞ –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏–∏ –¥–ª—è {pet.name} —É–¥–∞–ª–µ–Ω–∞",
                    reply_markup=get_main_menu()
                )
        await state.clear()
        return

    if not re.match(r'^\d{2}\.\d{2}\.\d{4}$', message.text):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ '–Ω–µ—Ç'")
        return

    try:
        day, month, year = map(int, message.text.split('.'))
        input_date = datetime(year, month, day).date()
        today = datetime.now().date()

        if input_date > today:
            await message.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.")
            return

        one_year_ago = today - relativedelta(years=1)
        if input_date < one_year_ago:
            await message.answer(
                "‚ö†Ô∏è –≠—Ç–∞ –¥–∞—Ç–∞ –±–æ–ª—å—à–µ –≥–æ–¥–∞ –Ω–∞–∑–∞–¥. –í–∞–∫—Ü–∏–Ω–∞—Ü–∏—è –¥–µ–ª–∞–µ—Ç—Å—è —Ä–∞–∑ –≤ –≥–æ–¥.\n"
                "–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É?",
                reply_markup=get_yes_no_vaccination_keyboard()
            )
            await state.update_data(old_date=message.text)
            return

        next_year_date = input_date + relativedelta(years=1)
        if next_year_date <= today:
            await message.answer(
                "‚ö†Ô∏è –î–∞—Ç–∞ –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≥–æ–¥ —É–∂–µ –ø—Ä–æ—à–ª–∞.\n"
                "–•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?",
                reply_markup=get_yes_no_vaccination_keyboard()
            )
            await state.update_data(vaccination_date=message.text)
            return

        await save_vaccination_date(message, state, message.text)

    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

async def save_vaccination_date(message: types.Message, state: FSMContext, new_date: str):
    data = await state.get_data()
    with Session() as session:
        pet = session.query(Pet).filter_by(id=data["pet_id"]).first()
        if pet:
            old_date = pet.vaccination_date
            pet.vaccination_date = new_date
            session.commit()

            try:
                for job in scheduler.get_jobs():
                    if job.id.startswith(f"vacc_{pet.id}_"):
                        scheduler.remove_job(job.id)

                await schedule_vaccination_reminder(
                    message.bot, pet.id, pet.owner.telegram_id, pet.name, new_date
                )

                response = f"‚úÖ –î–∞—Ç–∞ –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏–∏ –¥–ª—è {pet.name} –∏–∑–º–µ–Ω–µ–Ω–∞"
                if old_date:
                    response += f":\n–ë—ã–ª–æ: {old_date}\n–°—Ç–∞–ª–æ: {new_date}"
                else:
                    response += f"\n–°—Ç–∞–ª–æ: {new_date}"

                await message.answer(response, reply_markup=get_main_menu())

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", reply_markup=get_main_menu())
        else:
            await message.answer("–ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω")
    await state.clear()

@router.message(F.text == "üìö –°–ø—Ä–∞–≤–∫–∞")
async def info_start(message: types.Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞:",
        reply_markup=get_info_pet_type_keyboard()
    )
    await state.set_state(Form.info_pet_type)


@router.message(Form.info_pet_type)
async def info_pet_type_selected(message: types.Message, state: FSMContext):
    if message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main_menu(message, state)
        return

    if message.text not in ["üê± –ö–æ—à–∫–∞", "üê∂ –°–æ–±–∞–∫–∞", "üîô –ù–∞–∑–∞–¥"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        return

    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_menu()
        )
        await state.clear()

    await state.update_data(info_pet_type=message.text)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=get_info_category_keyboard()
    )
    await state.set_state(Form.info_category)


@router.message(Form.info_category)
async def info_category_selected(message: types.Message, state: FSMContext):
    categories = ["üçΩ –£—Ö–æ–¥", "üéæ –ò–≥—Ä—ã", "üíä –ó–¥–æ—Ä–æ–≤—å–µ", "üîô –ù–∞–∑–∞–¥"]
    if message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main_menu(message, state)
        return

    if message.text not in categories:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        return

    if message.text == "üîô –ù–∞–∑–∞–¥":
        await info_start(message, state)
        return

    data = await state.get_data()
    pet_type = data["info_pet_type"]

    info_texts = {
        "üê± –ö–æ—à–∫–∞": {
            "üçΩ –£—Ö–æ–¥": (
                "üê± <b>–£—Ö–æ–¥ –∑–∞ –∫–æ—à–∫–æ–π:</b>\n"
                "‚Ä¢ –ö–æ—Ä–º–ª–µ–Ω–∏–µ: 2-3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∫–æ—Ä–º–æ–º\n"
                "‚Ä¢ –í–æ–¥–∞: –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–≤–µ–∂–µ–π\n"
                "‚Ä¢ –õ–æ—Ç–æ–∫: —á–∏—Å—Ç–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ\n"
                "‚Ä¢ –®–µ—Ä—Å—Ç—å: –≤—ã—á–µ—Å—ã–≤–∞–π—Ç–µ 1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é\n"
                "‚Ä¢ –ö–æ–≥—Ç–∏: –ø–æ–¥—Å—Ç—Ä–∏–≥–∞–π—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
            ),
            "üéæ –ò–≥—Ä—ã": (
                "üê± <b>–ò–≥—Ä—ã —Å –∫–æ—à–∫–æ–π:</b>\n"
                "‚Ä¢ –ò–≥—Ä–∞–π—Ç–µ 15-20 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—É—à–∫–∏\n"
                "‚Ä¢ –û–±–µ—Å–ø–µ—á—å—Ç–µ –∫–æ–≥—Ç–µ—Ç–æ—á–∫—É\n"
                "‚Ä¢ –ú–µ–Ω—è–π—Ç–µ –∏–≥—Ä—É—à–∫–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ"
            ),
            "üíä –ó–¥–æ—Ä–æ–≤—å–µ": (
                "üê± <b>–ó–¥–æ—Ä–æ–≤—å–µ –∫–æ—à–∫–∏:</b>\n"
                "‚Ä¢ –ï–∂–µ–≥–æ–¥–Ω—ã–µ –ø—Ä–∏–≤–∏–≤–∫–∏\n"
                "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç –ø–∞—Ä–∞–∑–∏—Ç–æ–≤\n"
                "‚Ä¢ –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è/–∫–∞—Å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤—Ä–∞—á–∞\n"
                "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ—Å–º–æ—Ç—Ä—ã —É –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞"
            )
        },
        "üê∂ –°–æ–±–∞–∫–∞": {
            "üçΩ –£—Ö–æ–¥": (
                "üê∂ <b>–£—Ö–æ–¥ –∑–∞ —Å–æ–±–∞–∫–æ–π:</b>\n"
                "‚Ä¢ –ö–æ—Ä–º–ª–µ–Ω–∏–µ: 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å –ø–æ —Ä–µ–∂–∏–º—É\n"
                "‚Ä¢ –ü—Ä–æ–≥—É–ª–∫–∏: –º–∏–Ω–∏–º—É–º 2-3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å\n"
                "‚Ä¢ –ö—É–ø–∞–Ω–∏–µ: 1 —Ä–∞–∑ –≤ –º–µ—Å—è—Ü –∏–ª–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n"
                "‚Ä¢ –®–µ—Ä—Å—Ç—å: —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—á–µ—Å—ã–≤–∞–Ω–∏–µ"
            ),
            "üéæ –ò–≥—Ä—ã": (
                "üê∂ <b>–ò–≥—Ä—ã —Å —Å–æ–±–∞–∫–æ–π:</b>\n"
                "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –Ω–∞ —É–ª–∏—Ü–µ\n"
                "‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –æ–±—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º\n"
                "‚Ä¢ –ò–≥—Ä—É—à–∫–∏ –¥–ª—è –∂–µ–≤–∞–Ω–∏—è\n"
                "‚Ä¢ –°–æ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —Å–æ–±–∞–∫–∞–º–∏"
            ),
            "üíä –ó–¥–æ—Ä–æ–≤—å–µ": (
                "üê∂ <b>–ó–¥–æ—Ä–æ–≤—å–µ —Å–æ–±–∞–∫–∏:</b>\n"
                "‚Ä¢ –ï–∂–µ–≥–æ–¥–Ω—ã–µ –ø—Ä–∏–≤–∏–≤–∫–∏\n"
                "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç –ø–∞—Ä–∞–∑–∏—Ç–æ–≤ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü\n"
                "‚Ä¢ –°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è/–∫–∞—Å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
                "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ—Å–º–æ—Ç—Ä—ã —É –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞"
            )
        }
    }

    await message.answer(
        info_texts[pet_type][message.text],
        reply_markup=get_info_category_keyboard()
    )


@router.message(F.text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def reminders_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:",
        reply_markup=get_reminder_options()
    )


@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def add_reminder_start(message: types.Message, state: FSMContext):
    with Session() as session:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user or not user.pets:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–∏—Ç–æ–º—Ü–∞", reply_markup=get_main_menu())
            return

        pets_buttons = [[KeyboardButton(text=pet.name)] for pet in user.pets]
        pets_buttons.append([KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–∞:",
            reply_markup=ReplyKeyboardMarkup(keyboard=pets_buttons, resize_keyboard=True)
        )
        await state.set_state(Form.reminder_pet)


@router.message(Form.reminder_pet)
async def select_pet_for_reminder(message: types.Message, state: FSMContext):
    if message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main_menu(message, state)
        return

    if message.text == "üîô –ù–∞–∑–∞–¥":
        await reminders_menu(message, state)
        return

    with Session() as session:
        pet = session.query(Pet).filter_by(name=message.text).first()
        if not pet:
            await message.answer("–ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        await state.update_data(pet_id=pet.id, pet_name=pet.name)
        await message.answer(
            "‚è± –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú):",
            reply_markup=get_back_button()
        )
        await state.set_state(Form.reminder_time)


@router.message(Form.reminder_time)
async def set_reminder_time(message: types.Message, state: FSMContext):
    if message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main_menu(message, state)
        return

    if message.text == "üîô –ù–∞–∑–∞–¥":
        await add_reminder_start(message, state)
        return

    if not re.match(r'^([01]?[0-9]|2[0-3]):[0-5][0-9]$', message.text):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ß–ß:–ú–ú")
        return

    await state.update_data(reminder_time=message.text)
    await message.answer(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏:",
        reply_markup=get_days_keyboard()
    )
    await state.set_state(Form.reminder_days)


@router.message(Form.reminder_days)
async def set_reminder_days(message: types.Message, state: FSMContext):
    days_map = {
        "–ü–Ω": "mon", "–í—Ç": "tue", "–°—Ä": "wed",
        "–ß—Ç": "thu", "–ü—Ç": "fri", "–°–±": "sat", "–í—Å": "sun",
        "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ": "daily"
    }
    selected_day = days_map.get(message.text)

    if not selected_day:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∏–∑ —Å–ø–∏—Å–∫–∞")
        return

    data = await state.get_data()
    with Session() as session:
        pet = session.query(Pet).filter_by(id=data["pet_id"]).first()
        reminder = Reminder(
            time=data["reminder_time"],
            days=selected_day,
            pet=pet
        )
        session.add(reminder)
        session.commit()

        try:
            await schedule_jobs(message.bot)
            await message.answer(
                f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {pet.name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!",
                reply_markup=get_main_menu()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
                reply_markup=get_main_menu()
            )

    await state.clear()


@router.message(F.text == "–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def show_reminders(message: types.Message):
    with Session() as session:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user or not user.pets:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", reply_markup=get_main_menu())
            return

        has_reminders = False
        await message.answer("üîî –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")

        for pet in user.pets:
            if pet.reminders:
                has_reminders = True
                for reminder in pet.reminders:
                    days = "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ" if reminder.days == "daily" else ", ".join(reminder.days.split(", "))
                    await message.answer(
                        f"üêæ {pet.name} –≤ {reminder.time} ({days})",
                        reply_markup=get_reminder_actions_keyboard(reminder.id)
                    )

        if not has_reminders:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")


@router.callback_query(F.data.startswith("edit_time_"))
async def edit_reminder_time_handler(query: CallbackQuery, state: FSMContext):
    reminder_id = int(query.data.split("_")[2])
    await state.update_data(reminder_id=reminder_id)
    await query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú):",
        reply_markup=get_back_button()
    )
    await state.set_state(Form.edit_reminder_time)
    await query.answer()


@router.message(Form.edit_reminder_time)
async def process_edit_time(message: types.Message, state: FSMContext):
    if message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main_menu(message, state)
        return

    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await show_reminders(message)
        return

    if not re.match(r'^([01]?[0-9]|2[0-3]):[0-5][0-9]$', message.text):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ß–ß:–ú–ú")
        return

    data = await state.get_data()
    with Session() as session:
        reminder = session.query(Reminder).filter_by(id=data["reminder_id"]).first()
        if reminder:
            reminder.time = message.text
            session.commit()
            try:
                await schedule_jobs(message.bot)
                await message.answer("‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=get_main_menu())
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", reply_markup=get_main_menu())
        else:
            await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    await state.clear()


@router.callback_query(F.data.startswith("edit_days_"))
async def edit_reminder_days_handler(query: CallbackQuery, state: FSMContext):
    reminder_id = int(query.data.split("_")[2])
    await state.update_data(reminder_id=reminder_id)
    await query.message.answer(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–Ω–∏:",
        reply_markup=get_days_keyboard()
    )
    await state.set_state(Form.edit_reminder_days)
    await query.answer()


@router.message(Form.edit_reminder_days)
async def process_edit_days(message: types.Message, state: FSMContext):
    days_map = {
        "–ü–Ω": "mon", "–í—Ç": "tue", "–°—Ä": "wed",
        "–ß—Ç": "thu", "–ü—Ç": "fri", "–°–±": "sat", "–í—Å": "sun",
        "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ": "daily"
    }
    selected_day = days_map.get(message.text)

    if not selected_day:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∏–∑ —Å–ø–∏—Å–∫–∞")
        return

    data = await state.get_data()
    with Session() as session:
        reminder = session.query(Reminder).filter_by(id=data["reminder_id"]).first()
        if reminder:
            reminder.days = selected_day
            session.commit()
            try:
                await schedule_jobs(message.bot)
                await message.answer("‚úÖ –î–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=get_main_menu())
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–Ω–µ–π: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", reply_markup=get_main_menu())
        else:
            await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    await state.clear()


@router.callback_query(F.data.startswith("delete_reminder_"))
async def delete_reminder_handler(query: CallbackQuery):
    reminder_id = int(query.data.split("_")[2])
    with Session() as session:
        reminder = session.query(Reminder).filter_by(id=reminder_id).first()
        if reminder:
            pet_name = reminder.pet.name
            session.delete(reminder)
            session.commit()
            remove_reminder(reminder_id)
            await query.message.edit_text(
                f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {pet_name} —É–¥–∞–ª–µ–Ω–æ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_reminders")]
                ])
            )
            await query.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
        else:
            await query.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


@router.callback_query(F.data == "back_to_reminders")
async def back_to_reminders_handler(query: CallbackQuery):
    await query.message.delete()
    await show_reminders(query.message)
    await query.answer()


@router.callback_query(F.data == "cancel_action")
async def cancel_action_handler(query: CallbackQuery, state: FSMContext):
    await state.clear()
    await query.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
    await query.answer()


def register_handlers(dp: Dispatcher, bot: Bot):
    dp.include_router(router)